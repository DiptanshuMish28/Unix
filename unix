#Write a perl script to print Hello, world on screen
#!/bin/perl
# This will print "Hello, World"
print "Hello, world\n";
# Save the above file as hello.pl
# Execute the script:
# nagveni@nagveni-H55M-S2V:~/Desktop$ chmod 777 hello.pl
# -----------output-------------
# nagveni@nagveni-H55M-S2V:~/Desktop$ ./hello.pl
# ----------------Hello, world----------------------
# You can use double quotes or single quotes around literal strings as follows:
# !/bin/perl
print "Hello, world\n";
print 'Hello, world\n';
# Run the program:
# root@MUM084:~/Desktop# perl hello.pl
# Hello, world
# Hello, world\n
# Only double quotes interpolate variables and special characters such as newlines \n, whereas single
# quote does not interpolate any variable or special character.
# Perl has three basic data types:
# 1. scalars,
# 2. arrays of scalars, and
# 3. hashes of scalars, also known as associative arrays
# Scalar
# Scalars are simple variables. They are preceded by a dollar sign ($).
# A scalar is either a number, a string, or a reference.
# A reference is actually an address of a variable, which we will see in the upcoming chapters.
# Arrays
# Arrays are ordered lists of scalars that you access with a numeric index, which starts with 0.
# They are preceded by an "at" sign (@).
# Hashes
# Hashes are unordered sets of key/value pairs that you access using the keys as subscripts.
# They are preceded by a percent sign (%).
# To refer to a single element of a hash, you will use the hash variable name followed by the "key"
# associated with the value in curly brackets.
# Sample program to assign values to variables
!/bin/perl
$age = 25; # An integer assignment
$name = "John Paul"; # A string
$salary = 1445.50; # A floating point
@ages = (25, 30, 40);
@names = ("John Paul", "Lisa", "Kumar");
print "Age = $age\n";
print "Name = $name\n";
print "Salary = $salary\n";
print "\$ages[0] = $ages[0]\n";
print "\$ages[1] = $ages[1]\n";
print "\$ages[2] = $ages[2]\n";
print "\$ages[-1] = $ages[-1]\n";
print "\$ages[-2] = $ages[-2]\n";
print "\$ages[-3] = $ages[-3]\n";
print "\$names[0] = $names[0]\n";
print "\$names[1] = $names[1]\n";
print "\$names[2] = $names[2]\n";
%data = ('John Paul', 45, 'Lisa', 30, 'Kumar', 40);
print "\$data{'John Paul'} = $data{'John Paul'}\n";
print "\$data{'Lisa'} = $data{'Lisa'}\n";
print "\$data{'Kumar'} = $data{'Kumar'}\n";
# Run the program:
# root@MUM084:~/Desktop# perl var.pl
# -------output-----------
# Age = 25
# Name = John Paul
# Salary = 1445.5
# $ages[0] = 25
# $ages[1] = 30
# $ages[2] = 40
# $ages[-1] = 40
# $ages[-2] = 30
# $ages[-3] = 25
# $names[0] = John Paul
# $names[1] = Lisa
# $names[2] = Kumar
# $data{'John Paul'} = 45
# $data{'Lisa'} = 30
# $data{'Kumar'} = 40

---------------------------------------------------------------------------------------------

# Variable Context
# Perl treats same variable differently based on Context, i.e., situation where a variable is being used.
# Example:
!/bin/perl
@names = ('John Paul', 'Lisa', 'Kumar');
@copy = @names;
$size = @names;
print "Given names are : @copy\n";
print "Number of names are : $size\n";
# ---------------------Output-------------------
# root@MUM084:~/Desktop# perl context.pl
# Given names are : John Paul Lisa Kumar
# Number of names are : 3

----------------------------------------------------------------------------------------------------


# Program for simple operations on variables:
!/bin/perl
$str = "hello" . " world"; # Concatenates strings.
$num = 5+10; # adds two numbers.
$mul = 4*5; # multiplies two numbers.
$mix = $str . $num; # concatenates string and number.
print "str = $str\n";
print "num = $num\n";
print "mul = $mul\n";
print "mix = $mix\n";
# -----------------------------Output:---------------
# root@MUM084:~/Desktop# perl op.pl
# str = hello world
# num = 15
# mul = 20
# mix = hello world15

---------------------------------------------------------------------------------------------------

# Write a perl script to compute power of a given number
!/bin/perl
print " Enter base number: ";
$base=<>;
print " Enter power to be calculated: ";
$power=<>;
$result=$base**$power;
print " Result is : " . $result;
# ---------------------Output:-----------------------
# root@MUM084:~/Desktop# perl read.pl
# Enter base number: 3
# Enter power to be calculated: 2
# Result is : 9

---------------------------------------------------------------------------------------

# Write a perl script to check whether a number is prime or not.
!/bin/perl
print " Enter number to check: ";
$num=<STDIN>;
chop($num);
$flag=0;
for($i=2; $i<$num; $i++)
{
if ($num%$i ==0)
{
    $flag=1;
    break;
}
} if ($flag==1)
{
    print " $num is not prime\n ";
}
else
{
    print "$num is prime\n";
}
# ----------------------Output:---------------------------
# root@MUM084:~/Desktop# perl prime.pl
# Enter number to check: 5
# 5 is prime
# root@MUM084:~/Desktop# perl prime.pl
# Enter number to check: 4
# 4 is not prime@



# Program tp print weekdays

@weekdays = ('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday');
print "Enter a number from 1 to 7: ";
$number = <>;
if ($number >= 1 && $number <= 7) {
    print "$weekdays[$number - 1]\n";
}
else {
    print "Invalid number\n";
}

#----------------------------------------------------------------------------------------------------
#Program to display roll non and name of student

%students = (83 'Pranav Patil', 85 'Deep Prajapati', 90 'Akshay Rathod', 107 'Shashank Gupta');
print "Enter a number: ";
$num = <>
if (exists $students {int($num)}) {
    print "Student Name: $students{int($num)}\n";
}
else {
    print "Student info is not recorded\n";
}

#----------------------------------------------------------------------------------------------------
#Program to print multiplication table

print "Enter a no ";
$num=<>;
chomp($num);
for ($i=1; $i<=10; $i++){
    $result = int($num*$i);
    print "$num*$i=$result\n";
}



#Area and Perimeter of a Rectangke

echo "Enter the length of the rectangle"
read L
echo "Enter breadth"
read B
area=$(($L * $B))
peri=$((2 * ($L + $B)))
echo "Perimeter: $peri"
echoÂ "Area:Â $area"


#Run-command: $chmod 714 rectangle.sh


# Count number of lines, words and characters in a file


echo " no of bytes"
wc -c stu.txt
echo "no of lines"
wc -l stu.txt
echo "no of words"
wcÂ -wÂ stu.txt

#Run-command: $chmod 774 studentProf.sh


#Enter your roll number through command line input and print power table of your roll number upto 5

echo "Enter your roll number"
read rollNo
for((i=1;i<= 5;i++))
do
power=$((rollNo**i))
echo "$rollNo^$iÂ =$power"
done

#Run-command: chmod 775 powertable.sh


#Enter your middlename + firstname usingcommand line input.
#Create a dictionary using our missle name. 
#Go to dictionary and create a c filewith your firstname. 
#Create a program which willplay first name says hello. 
#Complete it usong Vcc and execute it.

#!/bin/bash

echo "Enter your middle name: "
read middle_name
echo "Enter your first name: "
read first_name
echo "Enter your surname: "
read surname

# Create a directory with surname as the name
mkdir "$surname"

# Move into the newly created directory
cd "$surname"

# Create a C source file
touch "${first_name}.c"

# Write the C code to display a message
cat > "${first_name}.c" << EOF
#include<stdio.h>
int main(){
    printf("\\nGreetings from ${first_name}\\n");
    return 0;
}
EOF

# Compile the C code
gcc "${first_name}.c" -o "${first_name}"

# Run the executable
./"${first_name}"


#Data for bank.lst

101 Aditya 0 14/11/2000 current
102 Anil 10000 20/05/2011 saving
103 Naman0 20/08/2009 current
104 Ram 10000 15/08/2010 saving
105 Jyotsna 5000 16/06/2012 saving
106 Mukesh 14000 20/12/2009 Current
107 Vishal 14500 30/11/2011 saving
108 Chirag 0 15/12/2012 Current
109 Arya 16000 14/12/2010 Current
110 Priya 130 16/11/2009 Saving	
201 Bina 3000 11/03/2010 saving
202 Diya 4000 13/04/2018 Saving
203 Gargi 2000 21/01/2015 current
Hina 204 3000014/02/2014 saving
Kalpana 205 4000 8/9/2007 Current
301 Nikhil 7777 8/9/1999 saving

#Display the first 3 columns

awk '{print $1 $2 $3}' bank.lst


#Print only those records having 'current' account.

awk /current/ bank.lst

#Format specifiers for the field can be specified as below:

awk '{printf "%3d \t %-15s \t %7d \n", $1, $2, $3}' bank.lst


#Print records having balance less than 5000

awk '$3<5000' bank.lst

#Options

#-c: This prints only a count of lines that match a pattern
#-i: Ignores, case of matchmaking
#-l: Displays list of filenames only
#-n: Display the matched line and their line numbers 
#-v: THis prints out all the lines that do not match the pattern
#-w: Match whole word
#-o: Print only matched parts of a matching line, with each part on a seperate output line

#Display student record where a name has 'Kum' in the record

$grep -F "Kum" students.txt

#COunt the number of records with S1

$grep -c "S1" students.txt

#Display lines in which roll Number does not start with 1

$grep -v "^1" students.txt

Command mode -  when vi starts up, it is in command mode. This mode is where vi interprets any characters we type as commands.
                This does not display them in windows. To enter into command mode, from any other mode, it requires pressing Esc key.

Insert Mode - This mode enables you to insert text into file. To come in insert mode you simply type 'i'.
            To get out of insert mode, press the ESC key.

Lost Line Mode - Lost Line mode is invoked by typing a color [:], while vi is in command mode. 
                 The cursor will jump to the last line of the screen and vi will waitÂ for command



// commands

commands and their description.

vi -r filename: opens an existing file in read-only
vi filename: Creates a new file if it already does not exist otherwise, opens exiting file..

#Moving with a file (Navigation)

K: Moves the cursor up and line.
j: Moves the cursor down one line.
h: Moves the cursor to the left one character position.
l: Moves the cursor to the right one character position

#Editing and Inserting in files.

i: Incerts text file before artent uns or location la
I: Inserts text at beginning of ument time.
a: Inserts text after current cursor location...
A: Inserts text at the end of the current line.
o: Creates a new line for text entry below cursor
O: Creates a new line for text entry above cursor

#Deleting characters

ow: Deletes from the current cursor location.
D: Deletes from the cursor position to the end of the file
dd: Deletes the line the cursor is on


#Copy and Paste commands

Yy: Copies the current line
p: Puts the copied text.
P: Puts the wanted text before the curcor.

#save and Exit commands.

q: quit
q!: Quit without saving changes:i.e:.. discard changes
wq: write & quitÂ (saveÂ andÂ quit)
